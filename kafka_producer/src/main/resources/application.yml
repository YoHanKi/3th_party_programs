# ===================================================================
# 실무 수준의 애플리케이션 설정 가이드
# ===================================================================
# 이 설정 파일은 다음 환경에 맞게 조정해야 합니다:
# 1. 개발 환경: 현재 설정은 로컬 개발 환경에 최적화되어 있습니다.
# 2. 테스트 환경: 로깅 레벨을 조정하고, 보안 설정을 활성화하세요.
# 3. 프로덕션 환경:
#    - 보안 설정을 활성화하세요 (HTTPS, 인증 등).
#    - 모니터링 및 알림을 설정하세요.
#    - 성능 설정을 조정하세요 (캐시, 스레드 풀 등).
#    - 로깅 레벨을 INFO 또는 WARN으로 설정하세요.
#    - 데이터베이스 연결 풀 설정을 조정하세요.
#    - 클러스터링 설정을 활성화하세요 (필요 시).
# ===================================================================

# 프로필 설정
# 개발: dev, 테스트: test, 운영: prod
spring:
  application:
    name: kafka_producer

  # ===================================================================
  # 카프카 설정 가이드
  # ===================================================================
  # 이 설정은 다음 환경에 맞게 조정해야 합니다:
  # 1. 개발 환경: 현재 설정은 단일 브로커 개발 환경에 최적화되어 있습니다.
  # 2. 테스트 환경: 복제 팩터를 2로 설정하고, min.insync.replicas를 2로 설정하세요.
  # 3. 프로덕션 환경: 
  #    - 복제 팩터를 3 이상으로 설정하세요.
  #    - min.insync.replicas를 2 이상으로 설정하세요.
  #    - 보안 설정을 활성화하세요 (SSL/SASL).
  #    - 모니터링 및 알림을 설정하세요.
  #    - 클러스터 크기에 따라 성능 설정을 조정하세요.
  #
  # 주요 설정 항목:
  # - acks: 메시지 전송 확인 수준 (0, 1, all)
  # - retries: 재시도 횟수
  # - batch-size: 배치 크기 (성능 조정)
  # - linger-ms: 배치 전송 전 대기 시간 (성능 조정)
  # - enable-idempotence: 멱등성 활성화 (중복 방지)
  # - auto-offset-reset: 초기 오프셋 위치 (earliest, latest)
  # - enable-auto-commit: 자동 커밋 여부
  # ===================================================================

  kafka:
    bootstrap-servers: localhost:29092
    # 기본 연결 설정
    properties:
      client.id: ${spring.application.name}
      security.protocol: PLAINTEXT

    # 프로듀서 설정
    producer:
      # 직렬화 설정
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

      # 안정성 설정
      acks: all                     # 모든 복제본이 메시지를 받았는지 확인 (가장 안전)
      retries: 3                    # 전송 실패 시 재시도 횟수
      retry-backoff-ms: 1000        # 재시도 간 대기 시간 (ms)

      # 성능 설정
      batch-size: 16384             # 배치 크기 (bytes)
      buffer-memory: 33554432       # 버퍼 메모리 크기 (32MB)
      compression-type: snappy      # 압축 타입 (none, gzip, snappy, lz4, zstd)
      linger-ms: 5                  # 배치 전송 전 대기 시간 (ms)

      # 기타 설정
      client-id: ${spring.application.name}-producer
      transaction-id-prefix: tx-    # 트랜잭션 ID 접두사 (트랜잭션 사용 시)
      enable-idempotence: true      # 멱등성 활성화 (중복 전송 방지)

    # 컨슈머 설정
    consumer:
      # 직렬화 설정
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

      # 그룹 설정
      group-id: ${spring.application.name}-consumer-group

      # 오프셋 설정
      auto-offset-reset: earliest   # 초기 오프셋 위치 (earliest, latest, none)
      enable-auto-commit: false     # 자동 커밋 비활성화 (수동 커밋 권장)
      auto-commit-interval: 5000    # 자동 커밋 간격 (ms) - 자동 커밋 사용 시

      # 성능 설정
      fetch-min-size: 1             # 최소 가져오기 크기 (bytes)
      fetch-max-wait: 500           # 최대 가져오기 대기 시간 (ms)
      max-poll-records: 500         # 한 번에 가져올 최대 레코드 수

      # 기타 설정
      client-id: ${spring.application.name}-consumer
      isolation-level: read_committed  # 트랜잭션 격리 수준

    # 관리자 설정
    admin:
      client-id: ${spring.application.name}-admin
      fail-fast: true               # 초기화 실패 시 빠른 실패

    # 토픽 설정
    topic:
      demo-topic:                   # 애플리케이션에서 사용하는 토픽 이름
        partitions: 3               # 파티션 수
        replication-factor: 1       # 복제 팩터 (개발 환경에서는 1, 프로덕션에서는 최소 3 권장)
        configs:                    # 토픽별 설정
          retention.ms: 604800000   # 데이터 보존 기간 (7일)
          segment.bytes: 1073741824 # 세그먼트 크기 (1GB)
          min.insync.replicas: 1    # 최소 동기화 복제본 수 (개발 환경에서는 1, 프로덕션에서는 2 이상 권장)

    # 보안 설정 (필요 시 활성화)
    # security:
    #   protocol: SSL               # 보안 프로토콜 (PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL)
    # ssl:
    #   key-store-location: classpath:kafka.keystore.jks
    #   key-store-password: keystore-password
    #   trust-store-location: classpath:kafka.truststore.jks
    #   trust-store-password: truststore-password

    # 리스너 설정
    listener:
      ack-mode: MANUAL_IMMEDIATE    # 수동 커밋 모드
      concurrency: 3                # 리스너 스레드 수
      poll-timeout: 5000            # 폴링 타임아웃 (ms)
      type: BATCH                   # 리스너 타입 (SINGLE, BATCH)
      missing-topics-fatal: false   # 토픽이 없을 때 오류 발생 여부

    # 헬스체크 설정
    streams:
      properties:
        metrics.recording.level: DEBUG  # 메트릭 기록 수준
        state.dir: /tmp/kafka-streams   # 상태 저장 디렉토리

  # ===================================================================
  # Elasticsearch 설정
  # ===================================================================
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 1s
    socket-timeout: 30s
    username: elastic  # 프로덕션 환경에서는 환경 변수 또는 외부 설정으로 관리
    password: changeme # 프로덕션 환경에서는 환경 변수 또는 외부 설정으로 관리
    rest:
      read-timeout: 30s

  # ===================================================================
  # WebFlux 설정
  # ===================================================================
  webflux:
    base-path:
    static-path-pattern: /static/**
    format:
      date: yyyy-MM-dd
      date-time: yyyy-MM-dd HH:mm:ss
      time: HH:mm:ss

  # ===================================================================
  # 보안 설정
  # ===================================================================
  security:
    user:
      name: admin
      password: changeme  # 프로덕션 환경에서는 환경 변수 또는 외부 설정으로 관리
    filter:
      order: 10
    headers:
      content-security-policy: "default-src 'self'"
      frame-options: DENY
      xss-protection: 1; mode=block

  # ===================================================================
  # 캐싱 설정
  # ===================================================================
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=500,expireAfterAccess=600s

  # ===================================================================
  # 비동기 작업 실행 설정
  # ===================================================================
  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100
        keep-alive: 60s
      thread-name-prefix: async-task-
    scheduling:
      pool:
        size: 4
      thread-name-prefix: scheduled-task-

  # ===================================================================
  # 국제화 설정
  # ===================================================================
  messages:
    basename: messages/messages
    encoding: UTF-8
    cache-duration: 3600s
    fallback-to-system-locale: false

# ===================================================================
# 서버 설정
# ===================================================================
server:
  port: 8080
  shutdown: graceful
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true
  error:
    include-stacktrace: never
    include-message: always
    whitelabel:
      enabled: false
  netty:  # WebFlux에서는 Netty 서버 사용
    connection-timeout: 5s
    max-initial-line-length: 8192
    validate-headers: true

# ===================================================================
# 로깅 설정
# ===================================================================
logging:
  level:
    root: INFO
    org.springframework: INFO
    com.practice3th_party_program: DEBUG
    org.apache.kafka: WARN
    org.elasticsearch: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log
    max-size: 10MB
    max-history: 30

# ===================================================================
# Actuator 모니터링 설정
# ===================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
    shutdown:
      enabled: false
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
    tags:
      application: ${spring.application.name}
